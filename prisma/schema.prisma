// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FormTemplate {
  id                      String           @id @default(uuid())
  Title                   String
  Description             String
  ItemsPerPage            ItemsPerPage
  CurrentVersion          Int
  Type                    FormType
  DisplayCode             String
  OwnerUserId             String
  RootSectionId           String?
  DefaultSectionNumbering Boolean
  FormSubmissions         FormSubmission[]
  FormSections            FormSection[]
  Questions               Question[]
  User                    User             @relation(fields: [OwnerUserId], references: [id])
  CreatedAt               DateTime         @default(now())
  UpdatedAt               DateTime?
  DeletedAt               DateTime?

  @@map("form_templates")
}

model FormSection {
  id                   String       @id @default(uuid())
  ParentFormTemplate   FormTemplate @relation(fields: [ParentFormTemplateId], references: [id])
  ParentFormTemplateId String //one-to-many relation with form_templates @map("ParentTemplateId")
  SectionIdentifier    String?
  Title                String?
  Description          String?
  DisplayCode          String
  Sequence             String?
  ParentSectionId      String?
  Questions            Question[]
  CreatedAt            DateTime     @default(now())
  UpdatedAt            DateTime?
  DeletedAt            DateTime?

  @@map("form_sections")
}

model Question {
  id                 String             @id @default(uuid())
  ParentFormTemplate FormTemplate       @relation(fields: [ParentTemplateId], references: [id])
  ParentTemplateId   String //one-to-many relation with form_templates
  ParentFormSection  FormSection        @relation(fields: [ParentSectionId], references: [id])
  ParentSectionId    String //one-to-many relation with form_section
  Title              String?
  Description        String?
  DisplayCode        String?
  ResponseType       QueryResponseType
  Score              Int?
  Sequence           String?
  CorrectAnswer      String?
  Hint               String?
  Options            Json?           
  QuestionImageUrl   String?
  RangeMin           Int?
  RangeMax           Int?
  Responses          QuestionResponse[]
  CreatedAt          DateTime           @default(now())
  UpdatedAt          DateTime?
  DeletedAt          DateTime?

  @@map("questions")
}

model FormSubmission {
  id                  String             @id @default(uuid())
  FormTemplate        FormTemplate       @relation(fields: [FormTemplateId], references: [id])
  FormTemplateId      String //one-to-many relation with form_templates
  FormUrl             String?
  Submitter           User?              @relation(fields: [AnsweredByUserId], references: [id])
  AnsweredByUserId    String? // one-to-many relation with user
  Status              FormStatus
  SubmissionTimestamp DateTime?
  QuestionResponses   QuestionResponse[]
  CreatedAt           DateTime           @default(now())
  UpdatedAt           DateTime?
  DeletedAt           DateTime?

  @@map("form_submissions")
}

model QuestionResponse {
  id                  String            @id @default(uuid())
  FormSubmission      FormSubmission    @relation(fields: [FormSubmissionId], references: [id])
  FormSubmissionId    String
  Question            Question          @relation(fields: [QuestionId], references: [id])
  QuestionId          String // one-to-many relation with question
  ResponseType        QueryResponseType
  IntegerValue        Int?
  FloatValue          Float?
  // BooleanValue        Boolean?
  BooleanValue        String?
  DateTimeValue       DateTime?
  Url                 String?
  FileResourceId      String?
  TextValue           String?
  SubmissionTimestamp DateTime?
  LastSaveTimestamp   DateTime
  CreatedAt           DateTime          @default(now())
  UpdatedAt           DateTime?
  DeletedAt           DateTime?

  @@map("question_responses")
}

model User {
  id            String             @id @default(uuid())
  FirstName     String
  LastName      String
  CountryCode   Int
  Phone         String
  Email         String
  Username      String
  Password      String
  CreatedAt     DateTime           @default(now())
  UpdatedAt     DateTime?
  DeletedAt     DateTime?
  LoginSessions UserLoginSession[]
  Submissions   FormSubmission[]
  Template      FormTemplate[]

  @@map("users")
}

model UserLoginSession {
  id              String    @id @default(uuid())
  User            User      @relation(fields: [UserId], references: [id])
  UserId          String //one-to-one relation with users
  IsActiveSession Boolean
  StartedAt       DateTime  @default(now())
  ValidTill       DateTime
  CreatedAt       DateTime  @default(now())
  UpdatedAt       DateTime?
  DeletedAt       DateTime?

  @@map("user_login_sessions")
}

enum FormType {
  Survey
  Questionnaire
  TestPaper
  DataCollection
}

enum ItemsPerPage {
  OneQuestion
  OneSection
  FiveQuestions
  TenQuestions
  AllQuestions
  AllSections
}

enum QueryResponseType {
  Text
  Float
  Integer
  Boolean
  Object
  TextArray
  // FloatArray
  // IntegerArray
  // BooleanArray
  // ObjectArray
  SingleChoiceSelection
  MultiChoiceSelection
  File
  Date
  DateTime
  Rating
  Location
  Range
  //Ok //Acknowledgement
  None //Not expecting response
  Temperature
  BloodPressure
  Glucose
  BloodOxygenSaturation
  PulseRate
  Hematocrit
  Cholesterol
  Lipoprotein
  CReactiveProtein
  Sleep
  HemoglobinA1C
  KidneyFunction
  WaistCircumference
  Electrolytes
  RespiratoryRate
  Weight
  Height
}

enum FormStatus {
  LinkShared
  Presented
  InProgress
  Submitted
}
