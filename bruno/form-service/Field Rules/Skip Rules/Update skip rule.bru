meta {
  name: Update Skip Rule
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/field-skip-rules/{{SKIP_RULE_ID}}
  body: json
  auth: none
}

body:json {
  {
    "Name": "Updated Age Skip Rule",
    "Description": "Updated description for age skip rule",
    "Priority": 2,
    "IsActive": false,
    "OperationId": "2ad466ac-7f4f-4ee1-8f54-784f2eccf1b9",
    "SkipWhenTrue": false,
    "LogicId": "221a286a-51cb-419d-8a31-4aa0700d43b8"
  }
}

script:post-response {
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(200);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Skip Rule is updated with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Updated Age Skip Rule');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Updated description for age skip rule');
    expect(jsonRes.Data).to.have.property('Priority');
    expect(jsonRes.Data.Priority).equals(2);
    expect(jsonRes.Data).to.have.property('IsActive');
    expect(jsonRes.Data.IsActive).equals(false);
    expect(jsonRes.Data).to.have.property('OperationId');
    expect(jsonRes.Data).to.have.property('SkipWhenTrue');
    expect(jsonRes.Data.SkipWhenTrue).equals(false);
    expect(jsonRes.Data).to.have.property('LogicId');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
}
