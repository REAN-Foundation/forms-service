meta {
  name: Create Validation Rule
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/field-validation-rules
  body: json
  auth: none
}

body:json {
  {
    "Name": "Email Validation Rule",
    "Description": "Validate email format and domain",
    "Priority": 1,
    "IsActive": true,
    "OperationId": "14aff0d6-0d9e-4337-90a8-ed0078a91a44",
    "ErrorWhenFalse": true,
    "ErrorMessage": "Please enter a valid email address",
    "LogicId": "15f0cedf-3f46-4498-a090-5a4360e26a21"
  }
}

script:post-response {
  try {
    var jsonRes = res.getBody();
    bru.setEnvVar("VALIDATION_RULE_ID", jsonRes.Data.id);
  }
  catch (error) {
    console.log(error.message);
  }
  
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(201);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Validation Rule is created with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Email Validation Rule');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Validate email format and domain');
    expect(jsonRes.Data).to.have.property('Priority');
    expect(jsonRes.Data.Priority).equals(1);
    expect(jsonRes.Data).to.have.property('IsActive');
    expect(jsonRes.Data.IsActive).equals(true);
    expect(jsonRes.Data).to.have.property('OperationId');
    expect(jsonRes.Data).to.have.property('ErrorWhenFalse');
    expect(jsonRes.Data.ErrorWhenFalse).equals(true);
    expect(jsonRes.Data).to.have.property('ErrorMessage');
    expect(jsonRes.Data.ErrorMessage).equals('Please enter a valid email address');
    expect(jsonRes.Data).to.have.property('LogicId');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
}
