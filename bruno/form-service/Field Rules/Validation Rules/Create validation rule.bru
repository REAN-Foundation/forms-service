meta {
  name: Create Validation Rule
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/field-validation-rules
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "Name": "Age Validation Rule",
    "Description": "Validate that age is between 0 and 150",
    "Priority": 1,
    "IsActive": true,
    "OperationType": "Logical",
    "OperationId": "2a2496eb-3420-492a-973c-7def5a21aeee",
  //   "OperationId": "{{LOGICAL_OPERATION_ID}}",
    "ErrorWhenFalse": true,
    "ErrorMessage": "Age must be between 0 and 150 years",
  //   "LogicId": "{{VALIDATION_LOGIC_ID}}"
    "LogicId": "100dd882-293c-4268-a1f2-02c2a291647d"
  }
}

script:post-response {
  try {
    var jsonRes = res.getBody();
    bru.setEnvVar("VALIDATION_RULE_ID", jsonRes.Data.id);
  }
  catch (error) {
    console.log(error.message);
  }
}

tests {
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(201);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Validation Rule is created with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Age Validation Rule');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Validate that age is between 0 and 150');
    expect(jsonRes.Data).to.have.property('Priority');
    expect(jsonRes.Data.Priority).equals(1);
    expect(jsonRes.Data).to.have.property('IsActive');
    expect(jsonRes.Data.IsActive).equals(true);
    expect(jsonRes.Data).to.have.property('OperationType');
    expect(jsonRes.Data.OperationType).equals('Logical');
    expect(jsonRes.Data).to.have.property('OperationId');
    expect(jsonRes.Data).to.have.property('ErrorWhenFalse');
    expect(jsonRes.Data.ErrorWhenFalse).equals(true);
    expect(jsonRes.Data).to.have.property('ErrorMessage');
    expect(jsonRes.Data.ErrorMessage).equals('Age must be between 0 and 150 years');
    expect(jsonRes.Data).to.have.property('LogicId');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
}
