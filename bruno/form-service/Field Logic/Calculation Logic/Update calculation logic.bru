meta {
  name: Update Calculation Logic
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/field-calculation-logic/{{CALCULATION_LOGIC_ID}}
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "Type": "Calculation",
    "FieldId": "{{FORM_FIELD_ID}}",
    "Enabled": false,
    "DefaultSkip": true,
    "FallbackValue": "100"
  }
}

script:post-response {
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(200);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Calculation Logic is updated with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Type');
    expect(jsonRes.Data.Type).equals('Calculation');
    expect(jsonRes.Data).to.have.property('FieldId');
    expect(jsonRes.Data.FieldId).equals('5b1410d5-47dd-424b-ac85-336e8d2a4d36');
    expect(jsonRes.Data).to.have.property('Enabled');
    expect(jsonRes.Data.Enabled).equals(false);
    expect(jsonRes.Data).to.have.property('DefaultSkip');
    expect(jsonRes.Data.DefaultSkip).equals(true);
    expect(jsonRes.Data).to.have.property('FallbackValue');
    expect(jsonRes.Data.FallbackValue).equals('100');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
}
