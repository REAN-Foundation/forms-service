meta {
  name: Create Mathematical Operation
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/field-mathematical-operations
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "Name": "Price Calculation Operation",
    "Description": "Calculate total price including tax",
    "Operator": "Add",
    "Operands": "[{\"Type\": \"FieldReference\", \"DataType\": \"Float\", \"FieldId\": \"{{BASE_PRICE_FIELD_ID}}\"}, {\"Type\": \"FieldReference\", \"DataType\": \"Float\", \"FieldId\": \"{{TAX_AMOUNT_FIELD_ID}}\"}]"
  }
}

script:post-response {
  try {
    var jsonRes = res.getBody();
    bru.setEnvVar("MATHEMATICAL_OPERATION_ID", jsonRes.Data.id);
  }
  catch (error) {
    console.log(error.message);
  }
  
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(201);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Mathematical Operation is created with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Price Calculation Operation');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Calculate total price including tax');
    expect(jsonRes.Data).to.have.property('Type');
    expect(jsonRes.Data.Type).equals('Mathematical');
    expect(jsonRes.Data).to.have.property('Operator');
    expect(jsonRes.Data.Operator).equals('Add');
    expect(jsonRes.Data).to.have.property('Operands');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
} 