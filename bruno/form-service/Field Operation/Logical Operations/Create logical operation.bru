meta {
  name: Create Logical Operation
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/field-logical-operations
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "Name": "Age Check Operation",
    "Description": "Check if age is greater than 18",
    "Type": "Logical",
    "Operator": "GreaterThan",
    "Operands": "[{\"type\":\"field\",\"value\":\"age\"},{\"type\":\"number\",\"value\":18}]"
  }
}

script:post-response {
  try {
    var jsonRes = res.getBody();
    bru.setEnvVar("LOGICAL_OPERATION_ID", jsonRes.Data.id);
  }
  catch (error) {
    console.log(error.message);
  }
  
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(201);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Logical Operation is created with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Age Check Operation');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Check if age is greater than 18');
    expect(jsonRes.Data).to.have.property('Type');
    expect(jsonRes.Data.Type).equals('Logical');
    expect(jsonRes.Data).to.have.property('Operator');
    expect(jsonRes.Data.Operator).equals('GreaterThan');
    expect(jsonRes.Data).to.have.property('Operands');
    expect(jsonRes.Data.Operands).equals('[{"type":"field","value":"age"},{"type":"number","value":18}]');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
} 