meta {
  name: Update Logical Operation
  type: http
  seq: 2
}

put {
  url: {{BASE_URL}}/field-logical-operations/{{LOGICAL_OPERATION_ID}}
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "Name": "Updated Age Check Operation",
    "Description": "Updated description for age check operation",
    "Type": "Logical",
    "Operator": "GreaterThanOrEqual",
    "Operands": "[{\"type\":\"field\",\"value\":\"age\"},{\"type\":\"number\",\"value\":21}]"
  }
}

script:post-response {
  test("Request is successful", function () {
    expect(res.getStatus()).to.equal(200);
    var jsonRes = res.getBody();
    expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Logical Operation is updated with correct properties", function () {
    var jsonRes = res.getBody();
    expect(jsonRes.Data).to.have.property('id');
    expect(jsonRes.Data.id).equals('{{LOGICAL_OPERATION_ID}}');
    expect(jsonRes.Data).to.have.property('Name');
    expect(jsonRes.Data.Name).equals('Updated Age Check Operation');
    expect(jsonRes.Data).to.have.property('Description');
    expect(jsonRes.Data.Description).equals('Updated description for age check operation');
    expect(jsonRes.Data).to.have.property('Type');
    expect(jsonRes.Data.Type).equals('Logical');
    expect(jsonRes.Data).to.have.property('Operator');
    expect(jsonRes.Data.Operator).equals('GreaterThanOrEqual');
    expect(jsonRes.Data).to.have.property('Operands');
    expect(jsonRes.Data.Operands).equals('[{"type":"field","value":"age"},{"type":"number","value":21}]');
    expect(jsonRes.Data).to.have.property('CreatedAt');
    expect(jsonRes.Data).to.have.property('UpdatedAt');
  });
} 