meta {
  name: Update form template record
  type: http
  seq: 3
}

put {
  url: {{BASE_URL}}/form-templates/{{TEMPLATE_ID}}
  body: json
  auth: none
}

headers {
  x-api-key: {{INTERNAL_API_KEY}}
  Authorization: Bearer {{JWT_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
      "Title": "Work Load Capacity of company",
      "Description": "This is description",
      "CurrentVersion": 1,
      "Type": "Questionnaire",
      "DisplayCode": "xyz1234asssssdfghj",
      "OwnerUserId": "16377833-8e6f-41b4-944a-98a91815a4d5",
      // "RootSectionId": "d04ca675-d4eb-4c6a-9820-6ba1cce3e625",
      "DefaultSectionNumbering": true,
      "ItemsPerPage":"OneQuestion"
  }
}

script:post-response {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(200);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('Success');
  });
  
  test("User is updated", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data.id).equals('b78158bd-7496-48f1-b625-2c489b9c65a9');
      expect(jsonRes.Data).to.have.property('Title');
      expect(jsonRes.Data.Title).equals('Work Load Capacity of company');
      expect(jsonRes.Data).to.have.property('Description');
      expect(jsonRes.Data.Description).equals('This is description');
      expect(jsonRes.Data).to.have.property('CurrentVersion');
      expect(jsonRes.Data.CurrentVersion).equals(1);
      expect(jsonRes.Data).to.have.property('Type');
      expect(jsonRes.Data.Type).equals('Questionnaire');
      expect(jsonRes.Data).to.have.property('ItemsPerPage');
      expect(jsonRes.Data.ItemsPerPage).equals('OneQuestion');
      expect(jsonRes.Data).to.have.property('DisplayCode');
      expect(jsonRes.Data.DisplayCode).equals('ASSESS_TEMP_#ps09rsfHz4JMmXftn');
      expect(jsonRes.Data).to.have.property('OwnerUserId');
      expect(jsonRes.Data.OwnerUserId).equals('16377833-8e6f-41b4-944a-98a91815a4d5');
      expect(jsonRes.Data).to.have.property('RootSectionId');
      expect(jsonRes.Data.RootSectionId).equals('d04ca675-d4eb-4c6a-9820-6ba1cce3e625');
      expect(jsonRes.Data).to.have.property('DefaultSectionNumbering');
      expect(jsonRes.Data.DefaultSectionNumbering).equals(true);
  });
}
