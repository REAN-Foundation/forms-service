{
	"info": {
		"_postman_id": "bc9d63d1-c937-475d-acda-8aa4d240fbaa",
		"name": "form-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24347822",
		"_collection_link": "https://inflectionzone-order-management-typescript.postman.co/workspace/assessment~6c10fd4f-9447-4878-a4d7-88df8016665b/collection/24347822-bc9d63d1-c937-475d-acda-8aa4d240fbaa?action=share&source=collection_link&creator=24347822"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "New user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"FirstName\",\r\n    \"LastName\": \"LastName\",\r\n    \"CountryCode\": 123456,\r\n    \"Phone\": \"1234567890\",\r\n    \"Email\": \"email@gmail.com\",\r\n    \"Username\": \"Username\",\r\n    \"Password\": \"Password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.FirstName).equals('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data.LastName).equals('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('123456');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data.Phone).equals('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.Email).equals('email@gmail.com');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data.Username).equals('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"    pm.expect(jsonRes.Data.Password).equals('lakalakalakalaka');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"FirstName\",\r\n    \"LastName\": \"LastName\",\r\n    \"CountryCode\": 123456,\r\n    \"Phone\": \"Phone\",\r\n    \"Email\": \"email@gmail.com\",\r\n    \"Username\": \"Username\",\r\n    \"Password\": \"lakalakalakalaka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/search?username=Username&password=Password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "username",
									"value": "Username"
								},
								{
									"key": "password",
									"value": "Password"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form template",
			"item": [
				{
					"name": "create a form template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"TEMPLATE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DefaultSectionNumbering');    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Assessment First\",\r\n    \"Description\": \"This is description\",\r\n    \"CurrentVersion\": 1,\r\n    \"Type\": \"Questionnaire\",\r\n    // \"DisplayCode\": \"xyz1234\",\r\n    \"OwnerUserId\": \"16377833-8e6f-41b4-944a-98a91815a4d5\",\r\n    // \"RootSectionId\": \"9618c6a8-0555-4a14-95ec-1946ec09c8e0\",\r\n    \"DefaultSectionNumbering\": true,\r\n    \"ItemsPerPage\":\"OneQuestion\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-templates",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form template by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DefaultSectionNumbering');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update form template record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).equals('b78158bd-7496-48f1-b625-2c489b9c65a9');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data.Title).equals('Work Load Capacity of company');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data.CurrentVersion).equals(1);\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Type).equals('Questionnaire');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data.ItemsPerPage).equals('OneQuestion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data.DisplayCode).equals('ASSESS_TEMP_#ps09rsfHz4JMmXftn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
									"    pm.expect(jsonRes.Data.OwnerUserId).equals('16377833-8e6f-41b4-944a-98a91815a4d5');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootSectionId');\r",
									"    pm.expect(jsonRes.Data.RootSectionId).equals('d04ca675-d4eb-4c6a-9820-6ba1cce3e625');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DefaultSectionNumbering');\r",
									"    pm.expect(jsonRes.Data.DefaultSectionNumbering).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Work Load Capacity of company\",\r\n    \"Description\": \"This is description\",\r\n    \"CurrentVersion\": 1,\r\n    \"Type\": \"Questionnaire\",\r\n    \"DisplayCode\": \"xyz1234asssssdfghj\",\r\n    \"OwnerUserId\": \"16377833-8e6f-41b4-944a-98a91815a4d5\",\r\n    \"RootSectionId\": \"d04ca675-d4eb-4c6a-9820-6ba1cce3e625\",\r\n    \"DefaultSectionNumbering\": true,\r\n    \"ItemsPerPage\":\"OneQuestion\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/search?id=210939f1-c6c4-4274-843d-72f44f77da65",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "What is your full name",
									"disabled": true
								},
								{
									"key": "description",
									"value": "about testing the assessment",
									"disabled": true
								},
								{
									"key": "id",
									"value": "210939f1-c6c4-4274-843d-72f44f77da65"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Details by template id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/d71cc1a7-abdb-4196-bfef-19ba4e7cd1be/details",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"d71cc1a7-abdb-4196-bfef-19ba4e7cd1be",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete form template record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/db5a31aa-9908-4413-9c74-f9929d41a861",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"db5a31aa-9908-4413-9c74-f9929d41a861"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form section",
			"item": [
				{
					"name": "Create new form section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SECTION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentFormTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SectionIdentifier');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"ParentFormTemplateId\": \"64888ed6-7452-48ad-8f4e-48448f21259f\",  //Form template id\r\n//     \"SectionIdentifier\": \"SectionIdentifier\",\r\n//     \"Title\": \"Title.................\",\r\n//     \"Description\": \"Description\",\r\n//     // \"DisplayCode\": \"DisplayCode\",\r\n//     \"Sequence\": \"Sequence three\",\r\n//     \"ParentSectionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\"   //any uuid value\r\n// }\r\n{\r\n    \"ParentFormTemplateId\": \"b78158bd-7496-48f1-b625-2c489b9c65a9\",\r\n    // \"SectionIdentifier\": \"new form section 1\"\r\n    // \"Title\": \"New form section \",\r\n    // \"Description\": \"sf esdrg\",\r\n    // \"Sequence\":\"abc\"\r\n    \"ParentSectionId\": \"d04ca675-d4eb-4c6a-9820-6ba1cce3e625\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-sections",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form section by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentFormTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SectionIdentifier');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/{{SECTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"{{SECTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update form section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).equals('ed5f241d-c8db-4483-bc9d-78077607f012');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data.Title).equals('Work Load Capacity of company');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data.Description).equals('This is description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data.CurrentVersion).equals(1);\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Type).equals('Questionnaire');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data.ItemsPerPage).equals('OneQuestion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data.DisplayCode).equals('ASSESS_TEMP_#ps09rsfHz4JMmXftn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerUserId');\r",
									"    pm.expect(jsonRes.Data.OwnerUserId).equals('16377833-8e6f-41b4-944a-98a91815a4d5');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RootSectionId');\r",
									"    pm.expect(jsonRes.Data.RootSectionId).equals('d04ca675-d4eb-4c6a-9820-6ba1cce3e625');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DefaultSectionNumbering');\r",
									"    pm.expect(jsonRes.Data.DefaultSectionNumbering).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     // \"TemplateId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n//     \"SectionIdentifier\": \"SectionIdentifier\",\r\n//     \"Title\": \"Title section \",\r\n//     \"Description\": \"Description\",\r\n//     \"DisplayCode\": \"DisplayCode\",\r\n//     \"Sequence\": \"Sequence three\",\r\n//     \"ParentSectionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\"\r\n// }\r\n{\r\n    \"SectionIdentifier\": \"new form section\",\r\n    \"Title\": \"first section\",\r\n    \"Description\": \"description\",\r\n    // \"Sequence\": \"1\",\r\n    \"ParentSectionId\": \"6eb7e68d-608b-4076-8a9d-bbc467ab9211\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-sections/{{SECTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"{{SECTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/search?parentFormTemplateId=51688651-458d-4b8f-922e-28ce072cfa15",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"search"
							],
							"query": [
								{
									"key": "parentFormTemplateId",
									"value": "51688651-458d-4b8f-922e-28ce072cfa15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the form section record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/a3fd3b20-473c-4b26-9bd7-b4791c9010d7",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"a3fd3b20-473c-4b26-9bd7-b4791c9010d7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Question",
			"item": [
				{
					"name": "Create a new question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"QUESTION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ResponseType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Score');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Hint');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Options');\r",
									"    pm.expect(jsonRes.Data).to.have.property('QuestionImageUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMin');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMax');\r",
									"    \r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Field</th>\r",
									"        <th>Value</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Status</td>\r",
									"        <td>{{response.Status}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Message</td>\r",
									"        <td>{{response.Message}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>HttpCode</td>\r",
									"        <td>{{response.HttpCode}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Method</td>\r",
									"        <td>{{response.Request.Method}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Host</td>\r",
									"        <td>{{response.Request.Host}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Body - ParentTemplateId</td>\r",
									"        <td>{{response.Request.Body.ParentTemplateId}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Body - ParentSectionId</td>\r",
									"        <td>{{response.Request.Body.ParentSectionId}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Body - ResponseType</td>\r",
									"        <td>{{response.Request.Body.ResponseType}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Body - Options</td>\r",
									"        <td>{{response.Request.Body.Options}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Url</td>\r",
									"        <td>{{response.Request.Url}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Request Params</td>\r",
									"        <td>{{response.Request.Params}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ID</td>\r",
									"        <td>{{response.Data.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Title</td>\r",
									"        <td>{{response.Data.Title}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Description</td>\r",
									"        <td>{{response.Data.Description}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data DisplayCode</td>\r",
									"        <td>{{response.Data.DisplayCode}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ResponseType</td>\r",
									"        <td>{{response.Data.ResponseType}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Score</td>\r",
									"        <td>{{response.Data.Score}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Sequence</td>\r",
									"        <td>{{response.Data.Sequence}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data CorrectAnswer</td>\r",
									"        <td>{{response.Data.CorrectAnswer}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Hint</td>\r",
									"        <td>{{response.Data.Hint}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data Options</td>\r",
									"        <td>{{response.Data.Options}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data QuestionImageUrl</td>\r",
									"        <td>{{response.Data.QuestionImageUrl}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data RangeMin</td>\r",
									"        <td>{{response.Data.RangeMin}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data RangeMax</td>\r",
									"        <td>{{response.Data.RangeMax}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection ID</td>\r",
									"        <td>{{response.Data.ParentFormSection.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection SectionIdentifier</td>\r",
									"        <td>{{response.Data.ParentFormSection.SectionIdentifier}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection Title</td>\r",
									"        <td>{{response.Data.ParentFormSection.Title}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection Description</td>\r",
									"        <td>{{response.Data.ParentFormSection.Description}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection DisplayCode</td>\r",
									"        <td>{{response.Data.ParentFormSection.DisplayCode}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection Sequence</td>\r",
									"        <td>{{response.Data.ParentFormSection.Sequence}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection ParentSectionId</td>\r",
									"        <td>{{response.Data.ParentFormSection.ParentSectionId}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormSection CreatedAt</td>\r",
									"        <td>{{response.Data.ParentFormSection.CreatedAt}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate ID</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate Title</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.Title}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate Description</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.Description}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate Type</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.Type}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate DisplayCode</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.DisplayCode}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate OwnerUserId</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.OwnerUserId}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate RootSectionId</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.RootSectionId}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate DefaultSectionNumbering</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.DefaultSectionNumbering}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data ParentFormTemplate CreatedAt</td>\r",
									"        <td>{{response.Data.ParentFormTemplate.CreatedAt}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data CreatedAt</td>\r",
									"        <td>{{response.Data.CreatedAt}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>Data UpdatedAt</td>\r",
									"        <td>{{response.Data.UpdatedAt}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"ParentTemplateId\": \"d9e0416b-b142-4492-a522-a7fc57f9c224\",     //Form Template id\r\n//     \"ParentSectionId\": \"36869bba-551f-4aaf-a150-ccafd9567254\",      //Form Section Id\r\n//     \"Title\": \"Question Two\",\r\n//     \"Description\": \"Question Two description\",\r\n//     \"DisplayCode\": \"Question Two Display code\",\r\n//     \"ResponseType\": \"Integer\",\r\n//     \"Score\": 11,\r\n//     \"CorrectAnswer\": \"Question Two correct answer\",\r\n//     \"Hint\": \"Question Two hint\",\r\n//     \"Options\":\"option1,option2\",\r\n//     \"QuestionImageUrl\":\"this.is.image\",\r\n//     \"RangeMin\":2,\r\n//     \"RangeMax\":4\r\n// },\r\n// {\r\n//     \"ParentTemplateId\": \"d9e0416b-b142-4492-a522-a7fc57f9c224\",\r\n//     \"ParentSectionId\": \"36869bba-551f-4aaf-a150-ccafd9567254\",\r\n//     \"Title\": \"range ........!\",\r\n//     \"Description\": \"Birth Day\",\r\n//     \"ResponseType\": \"Boolean\",\r\n//     \"Score\": 5,\r\n//     // \"DisplayCode\": \"2b3b3ea7-d55f-46fb-901f-380a92be0059\",\r\n//     \"CorrectAnswer\": \"1234\",\r\n//     \"Hint\": \"date\",\r\n//     \"QuestionImageUrl\": \"a\",\r\n//     \"RangeMin\": 1,\r\n//     \"RangeMax\": 2,\r\n//     \"Options\": \"option1, option2\"\r\n// }\r\n// {\r\n//     \"ParentTemplateId\": \"5777e0a8-6ba7-4313-ba4a-ff9b5bdb3d4a\",\r\n//     \"ParentSectionId\": \"a1b31378-59b0-4ca8-8d54-323798bf924e\",\r\n//     \"Title\": \"qqqqqqqqqqqqqqqq\",\r\n//     \"Description\": \"qqqqqqqqq\",\r\n//     \"ResponseType\": \"Text\",\r\n//     \"Score\": 1,\r\n//     \"CorrectAnswer\": \"qqqqqqqqqqqqqqq\",\r\n//     \"Hint\": \"qqqqqqqqqqqqq\",\r\n//     \"QuestionImageUrl\": \"qqqqqqqqqqqq\",\r\n//     \"RangeMin\": null,\r\n//     \"RangeMax\": null,\r\n//     \"Options\": [\r\n//         \"option1\",\r\n//         \"option2\"\r\n//     ]\r\n// }\r\n// {\r\n//     \"ParentTemplateId\": \"5777e0a8-6ba7-4313-ba4a-ff9b5bdb3d4a\",\r\n//     \"ParentSectionId\": \"a1b31378-59b0-4ca8-8d54-323798bf924e\",\r\n//     \"Title\": \"qqqqqqqqqqqqqqqq\",\r\n//     \"Description\": \"qqqqqqqqqq\",\r\n//     \"ResponseType\": \"SinglehoiceSelection\",\r\n//     \"Score\": 1,\r\n//     \"CorrectAnswer\": \"qqqqqqqqqqqqqqq\",\r\n//     \"Hint\": \"qqqqqqqqqqqqq\",\r\n//     \"QuestionImageUrl\": \"qqqqqqqqqqqq\",\r\n//     \"RangeMin\": null,\r\n//     \"RangeMax\": null,\r\n//     \"Options\": [\r\n//         {\r\n//             \"Text\": \"qqqqq\",\r\n//             \"Sequence\": 1\r\n//         },\r\n//         {\r\n//             \"Text\": \"qqqq\",\r\n//             \"Sequence\": 2\r\n//         },\r\n//         {\r\n//             \"Text\": \"qq\",\r\n//             \"Sequence\": 3\r\n//         }\r\n//     ]\r\n// }\r\n{\r\n    \"ParentTemplateId\": \"4fabef36-5992-4f9c-aa7b-2539ae24aa7e\",\r\n    \"ParentSectionId\": \"b8243963-7999-4623-b357-d1d16549d619\",\r\n    \"ResponseType\": \"SingleChoiceSelection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"1\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        },\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"2\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        },\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"3\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        },\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"1\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        },\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"2\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        },\r\n        {\r\n            \"Text\": \"qqqqq\",\r\n            \"Sequence\": \"3\",\r\n            \"ImageUrl\": \"asdasfdsf\"\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n\r\n{\r\n    \"Title\": \"What is your full name\",\r\n    \"Description\": \"description\",\r\n    \"ResponseType\": \"SingleChoiceSelection\",\r\n    \"Options\": [\r\n        {\r\n            \"Text\": \"sdfg\",\r\n            \"Sequence\": \"a1\",\r\n            \"ImageUrl\": \"wererterytryur\"\r\n        },\r\n        {\r\n            \"Text\": \"sdagdf\",\r\n            \"Sequence\": \"a2\",\r\n            \"ImageUrl\": \"asdf\"\r\n        },\r\n        {\r\n            \"Text\": \"dzfg\",\r\n            \"Sequence\": \"a3\",\r\n            \"ImageUrl\": \"zsdfg\"\r\n        },\r\n        {\r\n            \"Text\": \"zdfgdfg\",\r\n            \"Sequence\": \"a4\",\r\n            \"ImageUrl\": \"dfg\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/questions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get question by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ResponseType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Score');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Hint');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Options');\r",
									"    pm.expect(jsonRes.Data).to.have.property('QuestionImageUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMin');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMax');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/questions/{{QUESTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"questions",
								"{{QUESTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a question record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).equals('006330fd-c768-4034-90a0-3aa8ce3475f4');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"    pm.expect(jsonRes.Data.ParentTemplateId).equals('163bac66-4af0-40dc-a09f-bfbe866e7e89');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data.ParentSectionId).equals('c99e1620-df7a-45ce-b374-325002706f5f');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data.Title).equals('Enter respiratory rate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data.Description).equals('description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data.DisplayCode).equals('QUESTION_#RTx8BEH6Zsv8t2V');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ResponseType');\r",
									"    pm.expect(jsonRes.Data.ResponseType).equals('MultiChoiceSelection');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Score');\r",
									"    pm.expect(jsonRes.Data.Score).equals(1);\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data.Sequence).equals('A2');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data.CorrectAnswer).equals('A');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data.CorrectAnswer).equals('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Hint');\r",
									"    pm.expect(jsonRes.Data.Hint).equals('Hint');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Options');\r",
									"    pm.expect(jsonRes.Data.Options).equals('[\"HTML,CSS,JAVASCRIPT,JAVA,PYTHON,C,C++\"]');\r",
									"    pm.expect(jsonRes.Data).to.have.property('QuestionImageUrl');\r",
									"    pm.expect(jsonRes.Data.QuestionImageUrl).equals('QuestionImageUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMin');\r",
									"    pm.expect(jsonRes.Data.RangeMin).equals(1);\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMax');\r",
									"    pm.expect(jsonRes.Data.RangeMax).equals(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Current (referral) cardiac diagnosis/diagnoses?\",\r\n    \"ResponseType\": \"MultiChoiceSelection\",\r\n    \"RangeMin\": 1,\r\n    \"RangeMax\": 2,\r\n    \"Options\": [\r\n        \"Acute Coronary Syndrome - STEMI,Acute Coronary Syndrome - NSTEMI,Acute Coronary Syndrome - Unstable Angina,Stable Coronary Artery Disease or Stable Angina,Heart Failure,Atrial Fibrillation/Flutter/SVT,Peripheral Arterial Disease,Percutaneous Cardiac Intervention (TAVI/ASD Repair/Valvotomies),Heart Valve replacement,High cardiovascular risk patient (High CVD risk score, Diabetes, Metabolic syndrome, Chronic Kidney Disease, Multiple risk factors),Other\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/questions/{{QUESTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"questions",
								"{{QUESTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/questions/search?parentTemplateId=210939f1-c6c4-4274-843d-72f44f77da65",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"questions",
								"search"
							],
							"query": [
								{
									"key": "parentTemplateId",
									"value": "210939f1-c6c4-4274-843d-72f44f77da65"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a question record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/questions/{{QUESTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"questions",
								"{{QUESTION_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form Submission",
			"item": [
				{
					"name": "Create new form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SUBMISSION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentFormTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FormUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SubmissionTimestamp');\r",
									"       \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FormTemplateId\":\"163bac66-4af0-40dc-a09f-bfbe866e7e89\"        //Form Template Id\r\n    // \"FormUrl\": \"This is Third form\",\r\n    // \"AnsweredByUserId\": \"c9e5b365-a0ff-4f73-b168-f3a4263b777e\",     //Submitter / User Id\r\n    // \"Status\": \"InProgress\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-submissions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/{{SUBMISSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"{{SUBMISSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a form record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).equals('03ad39c3-d959-4843-bb08-122b06ed37a1');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FormTemplateId');\r",
									"    pm.expect(jsonRes.Data.FormTemplateId).equals('163bac66-4af0-40dc-a09f-bfbe866e7e89');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FormUrl');\r",
									"    pm.expect(jsonRes.Data.FormUrl).equals('FormUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AnsweredByUserId');\r",
									"    pm.expect(jsonRes.Data.AnsweredByUserId).equals('03ad39c3-d959-4843-bb08-122b06ed37a1');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data.Status).equals('LinkShared');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SubmissionTimestamp');\r",
									"    pm.expect(jsonRes.Data.SubmissionTimestamp).equals('2024-09-12 12:36:51.712');\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FormTemplateId\":\"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n    \"FormUrl\": \"This is Third form\",\r\n    \"AnsweredByUserId\": \"05b04a84-ce2d-4c5a-9528-4cc168e0ad0a\",\r\n    \"Status\": \"LinkShared\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/{{SUBMISSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"{{SUBMISSION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get submission by template id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/by-template/5777e0a8-6ba7-4313-ba4a-ff9b5bdb3d4a",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"by-template",
								"5777e0a8-6ba7-4313-ba4a-ff9b5bdb3d4a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit the instance of template",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/c17f6654-4ca3-47a1-8761-986f4f23d95e/submit",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"c17f6654-4ca3-47a1-8761-986f4f23d95e",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/search?id=b0ba4554-ffc0-496f-9985-45325e37de09",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "b0ba4554-ffc0-496f-9985-45325e37de09"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a form record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Form Submission is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-submissions/{{SUBMISSION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-submissions",
								"{{SUBMISSION_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Login Session",
			"item": [
				{
					"name": "Create a new session",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\": \"b2e2baf0-fc4f-47ec-a01a-20bcd18c2c9b\",\r\n     //User Id\r\n    \"IsActiveSession\": true,\r\n    \"ValidTill\": \"2025-10-30T16:30:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-login-sessions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-login-sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a login session by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user-login-sessions/6aad120e-4122-4358-b4c5-cffb6fdbb9d3",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-login-sessions",
								"6aad120e-4122-4358-b4c5-cffb6fdbb9d3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a session",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\": \"05b04a84-ce2d-4c5a-9528-4cc168e0ad0a\",\r\n    \"IsActiveSession\": false,\r\n    \"ValidTill\": \"2025-10-30T16:30:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-login-sessions/6aad120e-4122-4358-b4c5-cffb6fdbb9d3",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-login-sessions",
								"6aad120e-4122-4358-b4c5-cffb6fdbb9d3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a existing session",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user-login-sessions/6aad120e-4122-4358-b4c5-cffb6fdbb9d3",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-login-sessions",
								"6aad120e-4122-4358-b4c5-cffb6fdbb9d3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Question Response",
			"item": [
				{
					"name": "Create a new response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"RESPONSE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentFormTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FormUrl');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SubmissionTimestamp');\r",
									"       \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"FormSubmissionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n//     \"QuestionId\": \"1ce7590c-b37d-4668-b324-d20f0a86c923\",\r\n//     \"ResponseType\": \"Text\",\r\n//     \"IntegerValue\": 1,\r\n//     \"FloatValue\": 1.2,\r\n//     \"BooleanValue\": true,\r\n//     \"DateTimeValue\": \"2024-03-08 18:25:30.843\",\r\n//     \"Url\": \"https://meet.google.com/zrb-tyni-rdz\",\r\n//     \"FileResourceId\": \"0c9ea637-cb8d-468e-b4c7-303d2604c1b5\",\r\n//     \"TextValue\": \"hjsj1234-erhh233\",\r\n//     \"SubmissionTimestamp\": \"2024-03-08 18:25:30.843\",\r\n//     \"LastSaveTimestamp\": \"2024-03-08 18:25:30.843\"\r\n// }\r\n// {\r\n//     \"FormSubmissionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n//     \"QuestionId\": \"1ce7590c-b37d-4668-b324-d20f0a86c923\",\r\n//     \"ResponseType\": \"Text\",\r\n//     // \"IntegerValue\": 1,\r\n//     // \"FloatValue\": 1.2,\r\n//     // \"BooleanValue\": true,\r\n//     // \"DateTimeValue\": \"2024-03-08 18:25:30.843\",\r\n//     // \"Url\": \"https://meet.google.com/zrb-tyni-rdz\",\r\n//     // \"FileResourceId\": \"0c9ea637-cb8d-468e-b4c7-303d2604c1b5\",\r\n//     \"TextValue\": \"hjsj1234-erhh233\",\r\n//     \"SubmissionTimestamp\": \"2024-03-08 18:25:30.843\",\r\n//     \"LastSaveTimestamp\": \"2024-03-08 18:25:30.843\"\r\n// }\r\n// {\r\n//     \"FormSubmissionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n//     \"QuestionId\": \"1ce7590c-b37d-4668-b324-d20f0a86c923\",\r\n//     \"ResponseType\": \"Text\",\r\n//     \"TextValue\": \"hjsj1234-erhh233\",\r\n//     \"SubmissionTimestamp\": \"2024-03-08 18:25:30.843\",\r\n//     \"LastSaveTimestamp\": \"2024-03-08 18:25:30.843\"\r\n// }\r\n//     \"FormSubmissionId\": \"2ed8ebf0-bfac-462c-9012-9a3ab5f59ba6\",\r\n//     \"QuestionId\": \"1ce7590c-b37d-4668-b324-d20f0a86c923\",\r\n//     \"ResponseType\": \"Text\",\r\n//     \"TextValue\": \"hjsj1234-erhh233\",\r\n// }\r\n// {\r\n// \"FormSubmissionId\": \"533c53a0-c7bd-45a8-a557-441dab0ca650\", //Form submission id\r\n// \"Data\": [\r\n//     {\r\n//         \"id\": \"dce55a42-f0c4-49ed-b84c-d34893397f4a\",\r\n//         \"value\": \"Answer\"\r\n//     },\r\n//     {\r\n//         \"id\": \"dce55a42-f0c4-49ed-b84c-d34893397f4a\",\r\n//         \"value\": \"Answer\"\r\n//     }\r\n// ]\r\n// }\r\n// {\r\n//     \"FormSubmissionId\": \"533c53a0-c7bd-45a8-a557-441dab0ca650\", //Form submission id\r\n//     // \"Data\": [\r\n//     //     {\r\n//     //         \"id\": \"dce55a42-f0c4-49ed-b84c-d34893397f4a\",\r\n//     //         \"value\": \"Answer\"\r\n//     //     },\r\n//     //     {\r\n//     //         \"id\": \"dce55a42-f0c4-49ed-b84c-d34893397f4a\",\r\n//     //         \"value\": \"Answer\"\r\n//     //     }\r\n//     // ]\r\n//     \"Data\":{\r\n//        \"dce55a42-f0c4-49ed-b84c-d34893397f4a\":45646\r\n//     //    \"dce55a42-f0c4-49ed-b84c-d34893397f5a\":\"Answer\"\r\n//     }\r\n// }\r\n// {\r\n//     \"Data\": {\r\n//         \"3fcfd54d-b91e-4a3b-8867-92799cddc99e\": \"Prashant Pandurang Kharade\",\r\n//         \"c522ff62-7767-4d93-803b-14c935c3d96f\": \"kharade\",\r\n//         \"7716400e-240f-475e-bfc5-ee2b4afec14c\": \"pk\",\r\n//         \"d397554c-3ac5-4a25-8824-92bffb33e644\": \"Kiran\",\r\n//         \"541217fa-46a8-42f4-9151-1c9c66166cb3\": \"kharade\"\r\n//     },\r\n//     \"FormSubmissionId\": \"a4728261-1b9a-47a4-aabe-7a3437429639\"\r\n// }\r\n\r\n{\r\n    \"Data\": {\r\n        \"2255a13c-f4a3-4bcf-9125-e947adc262af\": \"Answer of first question\",\r\n        // \"f242a2f0-ab75-4423-bb3d-b08f496a66b9\": 123456,\r\n        // \"39b788f6-fbb2-4b77-bf38-d9c2b779bb26\": 6,\r\n        // \"d397554c-3ac5-4a25-8824-92bffb33e644\": [\"Prashant\", \"Pandurang\", \"Kharade\"],\r\n        \"02f21e5d-787f-409b-8456-f2ed691bc2b1\": \"true\"\r\n    },\r\n    \"FormSubmissionId\": \"8df8d6a5-5f35-46d8-8cae-4838a7a43d41\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/question-responses/save",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get response by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/question-responses/{RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"{RESPONSE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a existing response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.id).equals('03ad39c3-d959-4843-bb08-122b06ed37a1');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FormSubmissionId');\r",
									"    pm.expect(jsonRes.Data.FormSubmissionId).equals('163bac66-4af0-40dc-a09f-bfbe866e7e89');\r",
									"    pm.expect(jsonRes.Data).to.have.property('QuestionId');\r",
									"    pm.expect(jsonRes.Data.QuestionId).equals('6eddc7f6-bfae-4ee9-914e-2f48cfe3c825');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ResponseType');\r",
									"    pm.expect(jsonRes.Data.ResponseType).equals('Text');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IntegerValue');\r",
									"    pm.expect(jsonRes.Data.IntegerValue).equals(1);\r",
									"    pm.expect(jsonRes.Data).to.have.property('FloatValue');\r",
									"    pm.expect(jsonRes.Data.FloatValue).equals(1.2);\r",
									"    pm.expect(jsonRes.Data).to.have.property('BooleanValue');\r",
									"    pm.expect(jsonRes.Data.BooleanValue).equals(true);\r",
									"        pm.expect(jsonRes.Data).to.have.property('DateTimeValue');\r",
									"    pm.expect(jsonRes.Data.DateTimeValue).equals('2024-09-12 12:36:51.712');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Url');\r",
									"    pm.expect(jsonRes.Data.Url).equals('url');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FileResourceId');\r",
									"    pm.expect(jsonRes.Data.FileResourceId).equals('6eddc7f6-bfae-4ee9-914e-2f48cfe3c825');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TextValue');\r",
									"    pm.expect(jsonRes.Data.TextValue).equals('text value');\r",
									"         pm.expect(jsonRes.Data).to.have.property('SubmissionTimestamp');\r",
									"    pm.expect(jsonRes.Data.SubmissionTimestamp).equals('2024-09-12 12:36:51.712');\r",
									"         pm.expect(jsonRes.Data).to.have.property('LastSaveTimestamp');\r",
									"    pm.expect(jsonRes.Data.LastSaveTimestamp).equals('2024-09-12 12:36:51.712');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ResponseType\": \"Boolean\",\r\n    \"IntegerValue\": 1,\r\n    \"FloatValue\": 1.2,\r\n    \"BooleanValue\": true,\r\n    \"DateTimeValue\": \"2024-03-08 18:25:30.843\",\r\n    \"Url\": \"https://meet.google.com/zrb-tyni-rdz\",\r\n    \"FileResourceId\": \"0c9ea637-cb8d-468e-b4c7-303d2604c1b5\",\r\n    \"TextValue\": \"hjsj1234-erhh233\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/question-responses/{{RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"{{RESPONSE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export Responses in CSV",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/question-responses/exportcsv/export",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"exportcsv",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export responses in PDF",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/question-responses/exportpdf/export",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"exportpdf",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/question-responses/search?responseType=Text",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"search"
							],
							"query": [
								{
									"key": "formSubmissionId",
									"value": "a8b15839-1592-43b7-b586-89765cf99222",
									"disabled": true
								},
								{
									"key": "questionId",
									"value": "b56027ee-bdba-4182-bed6-d544a5bcc8e4",
									"disabled": true
								},
								{
									"key": "responseType",
									"value": "Text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/question-responses/{{RESPONSE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"question-responses",
								"{{RESPONSE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}",
					"host": [
						"{{BASE_URL}}"
					]
				}
			},
			"response": []
		}
	]
}