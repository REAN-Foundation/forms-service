{
	"info": {
		"_postman_id": "303c4b99-04f5-484e-a92b-79abd1651bbc",
		"name": "form-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37785554",
		"_collection_link": "https://sense-software.postman.co/workspace/sense-software-Workspace~4bf846a4-41d5-49ae-b537-9dcb3386e0ba/collection/37785554-303c4b99-04f5-484e-a92b-79abd1651bbc?action=share&source=collection_link&creator=37785554"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "New user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"FirstName\",\r\n    \"LastName\": \"LastName\",\r\n    \"CountryCode\": 123456,\r\n    \"Phone\": \"1234567890\",\r\n    \"Email\": \"email@gmail.com\",\r\n    \"Username\": \"Username\",\r\n    \"Password\": \"Password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User Updated successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Username');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Password');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"Updated FirstName\",\r\n    \"LastName\": \"Updated LastName\",\r\n    \"CountryCode\": 987654,\r\n    \"Phone\": \"0987654321\",\r\n    \"Email\": \"updatedemail@gmail.com\",\r\n    \"Username\": \"UpdatedUsername\",\r\n    \"Password\": \"UpdatedPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User search working\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RetrievedCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PageIndex');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Order');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrderBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User deleted successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Field Operations",
			"item": [
				{
					"name": "Logical Operations",
					"item": [
						{
							"name": "Create Logical Operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"LOGICAL_OPERATION_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}",
											"",
											"pm.test(\"Request is successful\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Status).to.eql('Success');",
											"});",
											"",
											"pm.test(\"Logical Operation is created\", function () {",
											"    var jsonRes = pm.response.json();",
											"    pm.expect(jsonRes.Data).to.have.property('id');",
											"    pm.expect(jsonRes.Data).to.have.property('Type');",
											"    pm.expect(jsonRes.Data).to.have.property('Operator');",
											"    pm.expect(jsonRes.Data).to.have.property('Operands');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Age Range Check\",\n    \"Description\": \"Check if age is between 18 and 65\",\n    \"Operator\": \"Between\",\n    \"Operands\": \"[{\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"FieldId\\\": \\\"{{FIELD_ID}}\\\"}, {\\\"Type\\\": \\\"Constant\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"Value\\\": 18}, {\\\"Type\\\": \\\"Constant\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"Value\\\": 65}]\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-logical-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-logical-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Get Logical Operation by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-logical-operations/{{LOGICAL_OPERATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-logical-operations", "{{LOGICAL_OPERATION_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Update Logical Operation",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Updated Age Range Check\",\n    \"Description\": \"Updated description for age range validation\",\n    \"Operator\": \"GreaterThanOrEqual\",\n    \"Operands\": \"[{\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"FieldId\\\": \\\"{{FIELD_ID}}\\\"}, {\\\"Type\\\": \\\"Constant\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"Value\\\": 21}]\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-logical-operations/{{LOGICAL_OPERATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-logical-operations", "{{LOGICAL_OPERATION_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Search Logical Operations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-logical-operations/search?operator=Between&type=Logical",
									"host": ["{{BASE_URL}}"],
									"path": ["field-logical-operations", "search"],
									"query": [
										{
											"key": "operator",
											"value": "Between"
										},
										{
											"key": "type",
											"value": "Logical"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Logical Operation",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-logical-operations/{{LOGICAL_OPERATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-logical-operations", "{{LOGICAL_OPERATION_ID}}"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mathematical Operations",
					"item": [
						{
							"name": "Create Mathematical Operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"MATHEMATICAL_OPERATION_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"BMI Calculation\",\n    \"Description\": \"Calculate BMI from weight and height\",\n    \"Operator\": \"Divide\",\n    \"Operands\": \"[{\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{WEIGHT_FIELD_ID}}\\\"}, {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{HEIGHT_FIELD_ID}}\\\"}]\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-mathematical-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-mathematical-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Get Mathematical Operation by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-mathematical-operations/{{MATHEMATICAL_OPERATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-mathematical-operations", "{{MATHEMATICAL_OPERATION_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Search Mathematical Operations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-mathematical-operations/search?operator=Add&type=Mathematical",
									"host": ["{{BASE_URL}}"],
									"path": ["field-mathematical-operations", "search"],
									"query": [
										{
											"key": "operator",
											"value": "Add"
										},
										{
											"key": "type",
											"value": "Mathematical"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Function Expression Operations",
					"item": [
						{
							"name": "Create Function Expression Operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"FUNCTION_EXPRESSION_OPERATION_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"BMI Calculator\",\n    \"Description\": \"Calculate BMI using weight and height\",\n    \"Expression\": \"weight / (height / 100) ^ 2\",\n    \"Variables\": \"{\\\"weight\\\": {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{WEIGHT_FIELD_ID}}\\\"}, \\\"height\\\": {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{HEIGHT_FIELD_ID}}\\\"}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-function-expression-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-function-expression-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Create Risk Score Calculator",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Risk Score Calculator\",\n    \"Description\": \"Calculate risk score based on age, BMI and blood pressure\",\n    \"Expression\": \"baseRisk + (age * 0.5) + (bloodPressure > 140 ? 20 : 0) + (bmi > 30 ? 15 : 0)\",\n    \"Variables\": \"{\\\"baseRisk\\\": {\\\"Type\\\": \\\"Constant\\\", \\\"DataType\\\": \\\"Float\\\", \\\"Value\\\": 10}, \\\"age\\\": {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Integer\\\", \\\"FieldId\\\": \\\"{{AGE_FIELD_ID}}\\\"}, \\\"bloodPressure\\\": {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{BP_FIELD_ID}}\\\"}, \\\"bmi\\\": {\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Float\\\", \\\"FieldId\\\": \\\"{{BMI_FIELD_ID}}\\\"}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-function-expression-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-function-expression-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Search Function Expression Operations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-function-expression-operations/search?type=FunctionExpression",
									"host": ["{{BASE_URL}}"],
									"path": ["field-function-expression-operations", "search"],
									"query": [
										{
											"key": "type",
											"value": "FunctionExpression"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Composition Operations",
					"item": [
						{
							"name": "Create Composition Operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"COMPOSITION_OPERATION_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Complex Validation\",\n    \"Description\": \"AND combination of multiple validation rules\",\n    \"Operator\": \"And\",\n    \"Children\": \"[\\\"{{LOGICAL_OPERATION_ID}}\\\", \\\"{{MATHEMATICAL_OPERATION_ID}}\\\"]\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-composition-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-composition-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Search Composition Operations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-composition-operations/search?operator=And&type=Composition",
									"host": ["{{BASE_URL}}"],
									"path": ["field-composition-operations", "search"],
									"query": [
										{
											"key": "operator",
											"value": "And"
										},
										{
											"key": "type",
											"value": "Composition"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Iterate Operations",
					"item": [
						{
							"name": "Create Iterate Operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"ITERATE_OPERATION_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Array Score Validation\",\n    \"Description\": \"Check if all scores in array are above threshold\",\n    \"ItemAlias\": \"score\",\n    \"OperationId\": \"{{LOGICAL_OPERATION_ID}}\",\n    \"ArrayOperand\": \"{\\\"Type\\\": \\\"FieldReference\\\", \\\"DataType\\\": \\\"Array\\\", \\\"FieldId\\\": \\\"{{SCORES_ARRAY_FIELD_ID}}\\\"}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-iterate-operations",
									"host": ["{{BASE_URL}}"],
									"path": ["field-iterate-operations"]
								}
							},
							"response": []
						},
						{
							"name": "Search Iterate Operations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-iterate-operations/search?type=Iterate",
									"host": ["{{BASE_URL}}"],
									"path": ["field-iterate-operations", "search"],
									"query": [
										{
											"key": "type",
											"value": "Iterate"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Field Logic",
			"item": [
				{
					"name": "Skip Logic",
					"item": [
						{
							"name": "Create Skip Logic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"SKIP_LOGIC_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FieldId\": \"{{FIELD_ID}}\",\n    \"Enabled\": true,\n    \"DefaultSkip\": false\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-skip-logic",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-logic"]
								}
							},
							"response": []
						},
						{
							"name": "Get Skip Logic by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-skip-logic/{{SKIP_LOGIC_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-logic", "{{SKIP_LOGIC_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Update Skip Logic",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Enabled\": false,\n    \"DefaultSkip\": true\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-skip-logic/{{SKIP_LOGIC_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-logic", "{{SKIP_LOGIC_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Search Skip Logic",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-skip-logic/search?enabled=true&defaultSkip=false",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-logic", "search"],
									"query": [
										{
											"key": "enabled",
											"value": "true"
										},
										{
											"key": "defaultSkip",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation Logic",
					"item": [
						{
							"name": "Create Validation Logic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"VALIDATION_LOGIC_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FieldId\": \"{{FIELD_ID}}\",\n    \"Enabled\": true\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-validation-logic",
									"host": ["{{BASE_URL}}"],
									"path": ["field-validation-logic"]
								}
							},
							"response": []
						},
						{
							"name": "Search Validation Logic",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-validation-logic/search?enabled=true",
									"host": ["{{BASE_URL}}"],
									"path": ["field-validation-logic", "search"],
									"query": [
										{
											"key": "enabled",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Calculation Logic",
					"item": [
						{
							"name": "Create Calculation Logic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"CALCULATION_LOGIC_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FieldId\": \"{{FIELD_ID}}\",\n    \"Enabled\": true,\n    \"FallbackValue\": \"0\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-calculation-logic",
									"host": ["{{BASE_URL}}"],
									"path": ["field-calculation-logic"]
								}
							},
							"response": []
						},
						{
							"name": "Search Calculation Logic",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-calculation-logic/search?enabled=true",
									"host": ["{{BASE_URL}}"],
									"path": ["field-calculation-logic", "search"],
									"query": [
										{
											"key": "enabled",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Field Rules",
			"item": [
				{
					"name": "Skip Rules",
					"item": [
						{
							"name": "Create Skip Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"SKIP_RULE_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Adult Skip Rule\",\n    \"Description\": \"Skip guardian fields for adults\",\n    \"OperationId\": \"{{LOGICAL_OPERATION_ID}}\",\n    \"SkipWhenTrue\": true,\n    \"LogicId\": \"{{SKIP_LOGIC_ID}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-skip-rules",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-rules"]
								}
							},
							"response": []
						},
						{
							"name": "Get Skip Rule by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-skip-rules/{{SKIP_RULE_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-rules", "{{SKIP_RULE_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Update Skip Rule",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Updated Adult Skip Rule\",\n    \"Description\": \"Updated skip rule for adult users\",\n    \"SkipWhenTrue\": false\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-skip-rules/{{SKIP_RULE_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-rules", "{{SKIP_RULE_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Search Skip Rules",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-skip-rules/search?name=Adult&logicId={{SKIP_LOGIC_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-rules", "search"],
									"query": [
										{
											"key": "name",
											"value": "Adult"
										},
										{
											"key": "logicId",
											"value": "{{SKIP_LOGIC_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Skip Rule",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-skip-rules/{{SKIP_RULE_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-skip-rules", "{{SKIP_RULE_ID}}"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation Rules",
					"item": [
						{
							"name": "Create Validation Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"VALIDATION_RULE_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"Age Validation Rule\",\n    \"Description\": \"Validate age is between 0 and 150\",\n    \"OperationId\": \"{{LOGICAL_OPERATION_ID}}\",\n    \"ErrorWhenFalse\": true,\n    \"ErrorMessage\": \"Age must be between 0 and 150\",\n    \"LogicId\": \"{{VALIDATION_LOGIC_ID}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-validation-rules",
									"host": ["{{BASE_URL}}"],
									"path": ["field-validation-rules"]
								}
							},
							"response": []
						},
						{
							"name": "Get Validation Rule by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-validation-rules/{{VALIDATION_RULE_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["field-validation-rules", "{{VALIDATION_RULE_ID}}"]
								}
							},
							"response": []
						},
						{
							"name": "Search Validation Rules",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-validation-rules/search?name=Age&errorWhenFalse=true",
									"host": ["{{BASE_URL}}"],
									"path": ["field-validation-rules", "search"],
									"query": [
										{
											"key": "name",
											"value": "Age"
										},
										{
											"key": "errorWhenFalse",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Calculation Rules",
					"item": [
						{
							"name": "Create Calculation Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    var jsonRes = pm.response.json();",
											"    pm.environment.set(\"CALCULATION_RULE_ID\", jsonRes.Data.id);",
											"}",
											"catch (error) {",
											"    console.log(error.message);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\": \"BMI Calculation Rule\",\n    \"Description\": \"Calculate BMI based on weight and height\",\n    \"OperationId\": \"{{FUNCTION_EXPRESSION_OPERATION_ID}}\",\n    \"ConditionForOperationId\": \"{{LOGICAL_OPERATION_ID}}\",\n    \"LogicId\": \"{{CALCULATION_LOGIC_ID}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/field-calculation-rules",
									"host": ["{{BASE_URL}}"],
									"path": ["field-calculation-rules"]
								}
							},
							"response": []
						},
						{
							"name": "Search Calculation Rules",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/field-calculation-rules/search?name=BMI",
									"host": ["{{BASE_URL}}"],
									"path": ["field-calculation-rules", "search"],
									"query": [
										{
											"key": "name",
											"value": "BMI"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Form template",
			"item": [
				{
					"name": "create a form template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"TEMPLATE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TemplateName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CreatedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApprovalStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Visibility');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusDescription');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MachineReadableFileName');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TemplateName\": \"Patient Survey Form\",\r\n    \"Description\": \"A comprehensive patient intake survey\",\r\n    \"CurrentVersion\": \"1.0\",\r\n    \"Tags\": \"Patient, Survey, Medical\",\r\n    \"CreatedBy\": \"{{USER_ID}}\",\r\n    \"ApprovalStatus\": \"Pending\",\r\n    \"Visibility\": \"Public\",\r\n    \"StatusDescription\": \"New template for patient intake\",\r\n    \"OwnerId\": \"{{USER_ID}}\",\r\n    \"OwnerName\": \"Test User\",\r\n    \"PublishedBy\": \"{{USER_ID}}\",\r\n    \"PublishedDate\": \"2024-01-01T00:00:00.000Z\",\r\n    \"MachineReadableFileName\": \"patient-survey-v1.json\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-templates",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form template by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TemplateName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CreatedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApprovalStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Visibility');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusDescription');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MachineReadableFileName');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update form template record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template Updated successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TemplateName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CurrentVersion');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tags');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CreatedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApprovalStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Visibility');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusDescription');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PublishedDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MachineReadableFileName');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TemplateName\": \"Updated Patient Survey Form\",\r\n    \"Description\": \"An updated comprehensive patient intake survey\",\r\n    \"CurrentVersion\": \"1.1\",\r\n    \"Tags\": \"Patient, Survey, Medical, Updated\",\r\n    \"CreatedBy\": \"{{USER_ID}}\",\r\n    \"ApprovalStatus\": \"Approved\",\r\n    \"Visibility\": \"Public\",\r\n    \"StatusDescription\": \"Updated template for patient intake\",\r\n    \"OwnerId\": \"{{USER_ID}}\",\r\n    \"OwnerName\": \"Updated Test User\",\r\n    \"PublishedBy\": \"{{USER_ID}}\",\r\n    \"PublishedDate\": \"2024-01-02T00:00:00.000Z\",\r\n    \"MachineReadableFileName\": \"patient-survey-v1-1.json\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template search working\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RetrievedCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PageIndex');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Order');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrderBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Details by template id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}/details",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete form template record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Template deleted successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Form Submissions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}/form-submissions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}",
								"form-submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export Form Template",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}/export",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Preview Form Template",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-templates/{{TEMPLATE_ID}}/preview",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-templates",
								"{{TEMPLATE_ID}}",
								"preview"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form section",
			"item": [
				{
					"name": "Create new form section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"SECTION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Personal Information\",\r\n    \"Description\": \"Basic personal details section\",\r\n    \"DisplayCode\": \"PERSONAL_INFO\",\r\n    \"Sequence\": 1,\r\n    \"ParentSectionId\": null,\r\n    \"ParentTemplateId\": \"{{TEMPLATE_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-sections",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form section by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section retrived successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/{{SECTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"{{SECTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update form section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section Updated successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Updated Personal Information\",\r\n    \"Description\": \"Updated basic personal details section\",\r\n    \"DisplayCode\": \"PERSONAL_INFO_V2\",\r\n    \"Sequence\": 1,\r\n    \"ParentSectionId\": null,\r\n    \"ParentTemplateId\": \"{{TEMPLATE_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-sections/{{SECTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"{{SECTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generic search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section search working\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RetrievedCount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PageIndex');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ItemsPerPage');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Order');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OrderBy');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Items');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the form section record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Section deleted successful\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/{{SECTION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"{{SECTION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get form section by template id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/form-sections/by-template/{{TEMPLATE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-sections",
								"by-template",
								"{{TEMPLATE_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Question",
			"item": [
				{
					"name": "Create a new question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"FIELD_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Question is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentTemplateId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ParentSectionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ResponseType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Score');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CorrectAnswer');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Hint');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Options');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ImageResourceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMin');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RangeMax');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DefaultExpectedUnit');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PageBreakAfter');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SkipLogicId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CalculateLogicId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ValidateLogicId');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ParentTemplateId\": \"{{TEMPLATE_ID}}\",\r\n    \"ParentSectionId\": \"{{SECTION_ID}}\",\r\n    \"Title\": \"What is your age?\",\r\n    \"Description\": \"Please enter your age in years\",\r\n    \"DisplayCode\": \"AGE_QUESTION\",\r\n    \"ResponseType\": \"Number\",\r\n    \"Score\": 0,\r\n    \"Sequence\": 1,\r\n    \"CorrectAnswer\": null,\r\n    \"IsRequired\": true,\r\n    \"Hint\": \"Enter a number between 0 and 150\",\r\n    \"Options\": [],\r\n    \"ImageResourceId\": null,\r\n    \"RangeMin\": 0,\r\n    \"RangeMax\": 150,\r\n    \"DefaultExpectedUnit\": \"years\",\r\n    \"PageBreakAfter\": false,\r\n    \"SkipLogicId\": null,\r\n    \"CalculateLogicId\": null,\r\n    \"ValidateLogicId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/form-fields",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"form-fields"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}",
					"host": [
						"{{BASE_URL}}"
					]
				}
			},
			"response": []
		}
	]
}